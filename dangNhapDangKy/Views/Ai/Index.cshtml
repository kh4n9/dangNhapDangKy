@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with GPT-3.5</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .chat-container {
            width: 80%; /* Đặt chiều rộng tối đa */
            max-width: 500px; /* Giảm chiều rộng tối đa của hộp chat */
            height: 400px; /* Đặt chiều cao cố định */
            display: flex;
            flex-direction: column;
            border: 1px solid #ccc;
            border-radius: 10px;
            overflow: hidden;
            background-color: white;
            position: fixed;
            bottom: 20px;
            right: 20px;
        }

        .chat-header {
            background-color: #4CAF50; /* Màu nền header tương tự với Chat GPT */
            color: white;
            padding: 10px;
            text-align: center;
            border-top-left-radius: 10px; /* Bo tròn góc header */
            border-top-right-radius: 10px;
        }

        .chat-body {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
        }

        .chat-footer {
            display: flex;
            align-items: center;
            padding: 10px;
            background-color: #f2f2f2;
            border-bottom-left-radius: 10px; /* Bo tròn góc footer */
            border-bottom-right-radius: 10px;
        }

        .chat-message {
            margin-bottom: 5px; /* Giảm khoảng cách giữa các tin nhắn */
            border-radius: 5px; /* Bo tròn góc của tin nhắn */
            padding: 8px;
            max-width: 90%; /* Giảm kích thước tin nhắn */
        }

            .chat-message.user {
                background-color: #ccf2ff;
                align-self: flex-end;
                text-align: right;
                padding: 8px;
                border-radius: 10px;
                margin: 5px 0;
                white-space: pre-wrap;
                word-break: break-word; /* Hiển thị đủ theo các kí tự */
            }

            .chat-message.gpt {
                background-color: #f2f2f2;
                align-self: flex-start;
                text-align: left;
                padding: 8px;
                border-radius: 10px;
                margin: 5px 0;
                white-space: pre-wrap;
                word-break: break-word; /* Hiển thị đủ theo các kí tự */
            }

            .chat-message.error {
                color: red;
            }

        .chat-footer textarea {
            width: calc(100% - 100px); /* Đặt chiều rộng của textarea */
            height: 47px; /* Đặt độ cao của textarea */
            padding: 10px; /* Thêm padding để nội dung không bị gần lề */
            border: none; /* Loại bỏ viền */
            border-radius: 25px; /* Bo tròn cả 4 góc */
            resize: none; /* Không cho phép resize */
        }

        .chat-footer button {
            background-color: #4CAF50; /* Màu nền */
            color: white; /* Màu chữ */
            border: none; /* Loại bỏ viền */
            padding: 10px 20px; /* Kích thước padding */
            cursor: pointer; /* Con trỏ khi di chuột vào */
            transition: background-color 0.3s ease; /* Hiệu ứng chuyển đổi màu */
            border-radius: 25px; /* Bo tròn cả 4 góc */
            margin-left: 10px; /* Khoảng cách giữa textarea và nút gửi */
        }


            .chat-footer button:hover {
                background-color: #45a049; /* Màu nền khi di chuột vào */
            }

    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h4>Chat with GPT-3.5</h4>
        </div>
        <div class="chat-body" id="chatBody">
            <!-- Initial greeting message -->
            <div class="chat-message gpt">Xin chào, tôi có thể giúp gì cho bạn?</div>
        </div>
        <div class="chat-footer">
            <textarea id="question" placeholder="Enter your request here..."></textarea>
            <button id="send">Send</button>
        </div>
    </div>

    //
    <input type="file" id="fileInput" />
    //

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        const apiKey = 'sk-proj-y29Nm7L12dXgHTVJvs6QT3BlbkFJ3APTcSowZmnFJpPIfnpC';  // Replace with your API key

        $(document).ready(function () {
            const storedContent = localStorage.getItem('fileContent');
            if (storedContent) {
                console.log('Stored file content loaded.');
            }
        });

        $('#send').click(function () {
            const file = document.getElementById('fileInput').files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const content = e.target.result;
                    localStorage.setItem('fileContent', content);  // Save file content to local storage
                    generateCompletion(content);
                };
                reader.readAsText(file);
            } else {
                const storedContent = localStorage.getItem('fileContent');
                if (storedContent) {
                    generateCompletion(storedContent);
                } else {
                    alert('Please upload a file first.');
                }
            }
        });

        async function generateCompletion(fileContent) {
            const question = $('#question').val();
            if (!question) {
                alert('Please enter a question.');
                return;
            }

            const content = `File Content: ${fileContent}\n\nQuestion: ${question}`;

            addChatMessage('user', question);  // Add user's question to the chat

            try {
                const data = {
                    model: 'gpt-3.5-turbo',
                    messages: [{
                        role: "user",
                        content: content
                    }],
                    max_tokens: 400
                };

                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + apiKey,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                });

                if (!response.ok) {
                    console.log('HTTP error', response.status);
                    const errorDetail = await response.text();
                    console.log('Error response body:', errorDetail);
                    addChatMessage('error', errorDetail);  // Show error message in chat
                } else {
                    const result = await response.json();
                    typeWriter('gpt', result.choices[0].message.content);  // Show GPT's response in chat with typewriter effect
                    console.log(result);
                }
            } catch (error) {
                console.error('Fetch error:', error);
                addChatMessage('error', 'Fetch error: ' + error.message);  // Show fetch error in chat
            }

            // Clear the input field
            $('#question').val('');
        }

        function addChatMessage(sender, message) {
            const chatBody = $('#chatBody');
            const messageElement = `<div class="chat-message ${sender}">${message}</div>`;
            chatBody.append(messageElement);
            chatBody.scrollTop(chatBody.prop("scrollHeight"));  // Scroll to the bottom
        }

        function typeWriter(sender, text) {
            const chatBody = $('#chatBody');
            const messageElement = `<div class="chat-message ${sender}"></div>`;
            const messageDiv = $(messageElement);
            chatBody.append(messageDiv);
            chatBody.scrollTop(chatBody.prop("scrollHeight"));  // Scroll to the bottom

            let i = 0;
            function type() {
                if (i < text.length) {
                    messageDiv.append(text.charAt(i));
                    i++;
                    setTimeout(type, 30);  // Adjust typing speed here (in milliseconds)
                    chatBody.scrollTop(chatBody.prop("scrollHeight"));  // Keep scrolling to the bottom
                }
            }

            type();
        }
    </script>
    <script src="https://sf-cdn.coze.com/obj/unpkg-va/flow-platform/chat-app-sdk/0.1.0-beta.2/libs/oversea/index.js"></script>
    <script>
        new CozeWebSDK.WebChatClient({
            config: {
                bot_id: '7370788916515307521',
            },
            componentProps: {
                title: 'Coze',
            },
        });
    </script>
</body>
</html>
